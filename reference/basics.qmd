# basics { #fastcore.basics }

`basics`

## Attributes

| Name | Description |
| --- | --- |
| [Self](#fastcore.basics.Self) |  |
| [arg0](#fastcore.basics.arg0) |  |
| [arg1](#fastcore.basics.arg1) |  |
| [arg2](#fastcore.basics.arg2) |  |
| [arg3](#fastcore.basics.arg3) |  |
| [arg4](#fastcore.basics.arg4) |  |
| [defaults](#fastcore.basics.defaults) |  |
| [inum_methods](#fastcore.basics.inum_methods) |  |
| [num_methods](#fastcore.basics.num_methods) |  |
| [rnum_methods](#fastcore.basics.rnum_methods) |  |

## Functions

| Name | Description |
| --- | --- |
| [add_props](#fastcore.basics.add_props) | Create properties passing each of `range(n)` to f |
| [anno_ret](#fastcore.basics.anno_ret) | Get the return annotation of `func` |
| [annotations](#fastcore.basics.annotations) | Annotations for `o`, or `type(o)` |
| [argnames](#fastcore.basics.argnames) | Names of arguments to function or frame `f` |
| [argwhere](#fastcore.basics.argwhere) | Like `filter_ex`, but return indices for matching items |
| [attrdict](#fastcore.basics.attrdict) | Dict from each `k` in `ks` to `getattr(o,k)` |
| [basic_repr](#fastcore.basics.basic_repr) | Minimal `__repr__` |
| [camel2snake](#fastcore.basics.camel2snake) | Convert CamelCase to snake_case |
| [camel2words](#fastcore.basics.camel2words) | Convert CamelCase to 'spaced words' |
| [chunked](#fastcore.basics.chunked) | Return batches from iterator `it` of size `chunk_sz` (or return `n_chunks` total) |
| [class2attr](#fastcore.basics.class2attr) | Return the snake-cased name of the class; strip ending `cls_name` if it exists. |
| [compile_re](#fastcore.basics.compile_re) | Compile `pat` if it's not None |
| [compose](#fastcore.basics.compose) | Create a function that composes all functions in `funcs`, passing along remaining `*args` and `**kwargs` to all |
| [concat](#fastcore.basics.concat) | Concatenate all collections and items as a list |
| [copy_func](#fastcore.basics.copy_func) | Copy a non-builtin function (NB `copy.copy` does not work for this) |
| [custom_dir](#fastcore.basics.custom_dir) | Implement custom `__dir__`, adding `add` to `cls` |
| [cycle](#fastcore.basics.cycle) | Like `itertools.cycle` except creates list of `None`s if `o` is empty |
| [delegate_attr](#fastcore.basics.delegate_attr) | Use in `__getattr__` to delegate to attr `to` without inheriting from `GetAttr` |
| [detuplify](#fastcore.basics.detuplify) | If `x` is a tuple with one thing, extract it |
| [eval_type](#fastcore.basics.eval_type) | `eval` a type or collection of types, if needed, for annotations in py3.10+ |
| [even_mults](#fastcore.basics.even_mults) | Build log-stepped array from `start` to `stop` in `n` steps. |
| [exec_import](#fastcore.basics.exec_import) | Import `sym` from `mod` in a new environment |
| [exec_local](#fastcore.basics.exec_local) | Call `exec` on `code` and return the var `var_name |
| [exec_new](#fastcore.basics.exec_new) | Execute `code` in a new environment and return it |
| [filter_dict](#fastcore.basics.filter_dict) | Filter a `dict` using `func`, applied to keys and values |
| [filter_ex](#fastcore.basics.filter_ex) | Like `filter`, but passing `kwargs` to `f`, defaulting `f` to `noop`, and adding `negate` and `gen` |
| [filter_keys](#fastcore.basics.filter_keys) | Filter a `dict` using `func`, applied to keys |
| [filter_values](#fastcore.basics.filter_values) | Filter a `dict` using `func`, applied to values |
| [first](#fastcore.basics.first) | First element of `x`, optionally filtered by `f`, or None if missing |
| [flatten](#fastcore.basics.flatten) | Concatenate all collections and items as a generator |
| [gen](#fastcore.basics.gen) | Like `(func(o) for o in seq if cond(func(o)))` but handles `StopIteration` |
| [get_annotations_ex](#fastcore.basics.get_annotations_ex) | Backport of py3.10 `get_annotations` that returns globals/locals |
| [get_class](#fastcore.basics.get_class) | Dynamically create a class, optionally inheriting from `sup`, containing `fld_names` |
| [getattrs](#fastcore.basics.getattrs) | List of all `attrs` in `o` |
| [getcallable](#fastcore.basics.getcallable) | Calls `getattr` with a default of `noop` |
| [groupby](#fastcore.basics.groupby) | Like `itertools.groupby` but doesn't need to be sorted, and isn't lazy, plus some extensions |
| [hasattrs](#fastcore.basics.hasattrs) | Test whether `o` contains all `attrs` |
| [ifnone](#fastcore.basics.ifnone) | `b` if `a` is None else `a` |
| [in_](#fastcore.basics.in_) | `True` if `x in a` |
| [instantiate](#fastcore.basics.instantiate) | Instantiate `t` if it's a type, otherwise do nothing |
| [is_array](#fastcore.basics.is_array) | `True` if `x` supports `__array__` or `iloc` |
| [last_index](#fastcore.basics.last_index) | Finds the last index of occurence of `x` in `o` (returns -1 if no occurence) |
| [listify](#fastcore.basics.listify) | Convert `o` to a `list` |
| [loop_first](#fastcore.basics.loop_first) | Iterate and generate a tuple with a flag for first value. |
| [loop_first_last](#fastcore.basics.loop_first_last) | Iterate and generate a tuple with a flag for first and last value. |
| [loop_last](#fastcore.basics.loop_last) | Iterate and generate a tuple with a flag for last value. |
| [map_ex](#fastcore.basics.map_ex) | Like `map`, but use `bind`, and supports `str` and indexing |
| [maps](#fastcore.basics.maps) | Like `map`, except funcs are composed first |
| [mapt](#fastcore.basics.mapt) | Tuplified `map` |
| [maybe_attr](#fastcore.basics.maybe_attr) | `getattr(o,attr,o)` |
| [merge](#fastcore.basics.merge) | Merge all dictionaries in `ds` |
| [mk_class](#fastcore.basics.mk_class) | Create a class using `get_class` and add to the caller's module |
| [nested_attr](#fastcore.basics.nested_attr) | Same as `getattr`, but if `attr` includes a `.`, then looks inside nested objects |
| [nested_callable](#fastcore.basics.nested_callable) | Same as `nested_attr` but if not found will return `noop` |
| [nested_idx](#fastcore.basics.nested_idx) | Index into nested collections, dicts, etc, with `idxs` |
| [nested_setdefault](#fastcore.basics.nested_setdefault) | Same as `setdefault`, but if `attr` includes a `.`, then looks inside nested objects |
| [not_](#fastcore.basics.not_) | Create new function that negates result of `f` |
| [num_cpus](#fastcore.basics.num_cpus) | Get number of cpus |
| [only](#fastcore.basics.only) | Return the only item of `o`, raise if `o` doesn't have exactly one item |
| [otherwise](#fastcore.basics.otherwise) | `y if tst(x) else x` |
| [partialler](#fastcore.basics.partialler) | Like `functools.partial` but also copies over docstring |
| [patch](#fastcore.basics.patch) | Decorator: add `f` to the first parameter's class (based on f's type annotations) |
| [patch_property](#fastcore.basics.patch_property) | Deprecated; use `patch(as_prop=True)` instead |
| [patch_to](#fastcore.basics.patch_to) | Decorator: add `f` to `cls` |
| [properties](#fastcore.basics.properties) | Change attrs in `cls` with names in `ps` to properties |
| [range_of](#fastcore.basics.range_of) | All indices of collection `a`, if `a` is a collection, otherwise `range` |
| [renumerate](#fastcore.basics.renumerate) | Same as `enumerate`, but returns index as 2nd element instead of 1st |
| [replicate](#fastcore.basics.replicate) | Create tuple of `item` copied `len(match)` times |
| [ret_false](#fastcore.basics.ret_false) | Predicate: always `False` |
| [ret_true](#fastcore.basics.ret_true) | Predicate: always `True` |
| [risinstance](#fastcore.basics.risinstance) | Curried `isinstance` but with args reversed |
| [set_nested_idx](#fastcore.basics.set_nested_idx) | Set value indexed like `nested_idx |
| [setattrs](#fastcore.basics.setattrs) |  |
| [setify](#fastcore.basics.setify) | Turn any list like-object into a set. |
| [signature_ex](#fastcore.basics.signature_ex) | Backport of `inspect.signature(..., eval_str=True` to <py310 |
| [snake2camel](#fastcore.basics.snake2camel) | Convert snake_case to CamelCase |
| [sorted_ex](#fastcore.basics.sorted_ex) | Like `sorted`, but if key is str use `attrgetter`; if int use `itemgetter` |
| [stop](#fastcore.basics.stop) | Raises exception `e` (by default `StopException`) |
| [store_attr](#fastcore.basics.store_attr) | Store params named in comma-separated `names` from calling context into attrs in `self` |
| [str2bool](#fastcore.basics.str2bool) | Case-insensitive convert string `s` too a bool (`y`,`yes`,`t`,`true`,`on`,`1`->`True`) |
| [str_enum](#fastcore.basics.str_enum) | Simplified creation of `StrEnum` types |
| [strcat](#fastcore.basics.strcat) | Concatenate stringified items `its` |
| [true](#fastcore.basics.true) | Test whether `x` is truthy; collections with >0 elements are considered `True` |
| [try_attrs](#fastcore.basics.try_attrs) | Return first attr that exists in `obj` |
| [tuplify](#fastcore.basics.tuplify) | Make `o` a tuple |
| [type_hints](#fastcore.basics.type_hints) | Like `typing.get_type_hints` but returns `{}` if not allowed type |
| [typed](#fastcore.basics.typed) | Decorator to check param and return types at runtime |
| [union2tuple](#fastcore.basics.union2tuple) |  |
| [uniqueify](#fastcore.basics.uniqueify) | Unique elements in `x`, optional `sort`, optional return reverse correspondence, optional prepend with elements. |
| [using_attr](#fastcore.basics.using_attr) | Construct a function which applies `f` to the argument's attribute `attr` |
| [val2idx](#fastcore.basics.val2idx) | Dict from value to index |
| [with_cast](#fastcore.basics.with_cast) | Decorator which uses any parameter annotations as preprocessing functions |
| [wrap_class](#fastcore.basics.wrap_class) | Decorator: makes function a method of a new class `nm` passing parameters to `mk_class` |
| [zip_cycle](#fastcore.basics.zip_cycle) | Like `itertools.zip_longest` but `cycle`s through elements of all but first argument |

### add_props { #fastcore.basics.add_props }

`basics.add_props(f, g=None, n=2)`

Create properties passing each of `range(n)` to f

### anno_ret { #fastcore.basics.anno_ret }

`basics.anno_ret(func)`

Get the return annotation of `func`

### annotations { #fastcore.basics.annotations }

`basics.annotations(o)`

Annotations for `o`, or `type(o)`

### argnames { #fastcore.basics.argnames }

`basics.argnames(f, frame=False)`

Names of arguments to function or frame `f`

### argwhere { #fastcore.basics.argwhere }

`basics.argwhere(iterable, f, negate=False, **kwargs)`

Like `filter_ex`, but return indices for matching items

### attrdict { #fastcore.basics.attrdict }

`basics.attrdict(o, *ks, default=None)`

Dict from each `k` in `ks` to `getattr(o,k)`

### basic_repr { #fastcore.basics.basic_repr }

`basics.basic_repr(flds=None)`

Minimal `__repr__`

### camel2snake { #fastcore.basics.camel2snake }

`basics.camel2snake(name)`

Convert CamelCase to snake_case

### camel2words { #fastcore.basics.camel2words }

`basics.camel2words(s, space=' ')`

Convert CamelCase to 'spaced words'

### chunked { #fastcore.basics.chunked }

`basics.chunked(it, chunk_sz=None, drop_last=False, n_chunks=None)`

Return batches from iterator `it` of size `chunk_sz` (or return `n_chunks` total)

### class2attr { #fastcore.basics.class2attr }

`basics.class2attr(self, cls_name)`

Return the snake-cased name of the class; strip ending `cls_name` if it exists.

### compile_re { #fastcore.basics.compile_re }

`basics.compile_re(pat)`

Compile `pat` if it's not None

### compose { #fastcore.basics.compose }

`basics.compose(*funcs, order=None)`

Create a function that composes all functions in `funcs`, passing along remaining `*args` and `**kwargs` to all

### concat { #fastcore.basics.concat }

`basics.concat(colls)`

Concatenate all collections and items as a list

### copy_func { #fastcore.basics.copy_func }

`basics.copy_func(f)`

Copy a non-builtin function (NB `copy.copy` does not work for this)

### custom_dir { #fastcore.basics.custom_dir }

`basics.custom_dir(c, add)`

Implement custom `__dir__`, adding `add` to `cls`

### cycle { #fastcore.basics.cycle }

`basics.cycle(o)`

Like `itertools.cycle` except creates list of `None`s if `o` is empty

### delegate_attr { #fastcore.basics.delegate_attr }

`basics.delegate_attr(self, k, to)`

Use in `__getattr__` to delegate to attr `to` without inheriting from `GetAttr`

### detuplify { #fastcore.basics.detuplify }

`basics.detuplify(x)`

If `x` is a tuple with one thing, extract it

### eval_type { #fastcore.basics.eval_type }

`basics.eval_type(t, glb, loc)`

`eval` a type or collection of types, if needed, for annotations in py3.10+

### even_mults { #fastcore.basics.even_mults }

`basics.even_mults(start, stop, n)`

Build log-stepped array from `start` to `stop` in `n` steps.

### exec_import { #fastcore.basics.exec_import }

`basics.exec_import(mod, sym)`

Import `sym` from `mod` in a new environment

### exec_local { #fastcore.basics.exec_local }

`basics.exec_local(code, var_name)`

Call `exec` on `code` and return the var `var_name

### exec_new { #fastcore.basics.exec_new }

`basics.exec_new(code)`

Execute `code` in a new environment and return it

### filter_dict { #fastcore.basics.filter_dict }

`basics.filter_dict(d, func)`

Filter a `dict` using `func`, applied to keys and values

### filter_ex { #fastcore.basics.filter_ex }

`basics.filter_ex(iterable, f=noop, negate=False, gen=False, **kwargs)`

Like `filter`, but passing `kwargs` to `f`, defaulting `f` to `noop`, and adding `negate` and `gen`

### filter_keys { #fastcore.basics.filter_keys }

`basics.filter_keys(d, func)`

Filter a `dict` using `func`, applied to keys

### filter_values { #fastcore.basics.filter_values }

`basics.filter_values(d, func)`

Filter a `dict` using `func`, applied to values

### first { #fastcore.basics.first }

`basics.first(x, f=None, negate=False, **kwargs)`

First element of `x`, optionally filtered by `f`, or None if missing

### flatten { #fastcore.basics.flatten }

`basics.flatten(o)`

Concatenate all collections and items as a generator

### gen { #fastcore.basics.gen }

`basics.gen(func, seq, cond=ret_true)`

Like `(func(o) for o in seq if cond(func(o)))` but handles `StopIteration`

### get_annotations_ex { #fastcore.basics.get_annotations_ex }

`basics.get_annotations_ex(obj, *, globals=None, locals=None)`

Backport of py3.10 `get_annotations` that returns globals/locals

### get_class { #fastcore.basics.get_class }

`basics.get_class(nm, *fld_names, sup=None, doc=None, funcs=None, **flds)`

Dynamically create a class, optionally inheriting from `sup`, containing `fld_names`

### getattrs { #fastcore.basics.getattrs }

`basics.getattrs(o, *attrs, default=None)`

List of all `attrs` in `o`

### getcallable { #fastcore.basics.getcallable }

`basics.getcallable(o, attr)`

Calls `getattr` with a default of `noop`

### groupby { #fastcore.basics.groupby }

`basics.groupby(x, key, val=noop)`

Like `itertools.groupby` but doesn't need to be sorted, and isn't lazy, plus some extensions

### hasattrs { #fastcore.basics.hasattrs }

`basics.hasattrs(o, attrs)`

Test whether `o` contains all `attrs`

### ifnone { #fastcore.basics.ifnone }

`basics.ifnone(a, b)`

`b` if `a` is None else `a`

### in_ { #fastcore.basics.in_ }

`basics.in_(x, a)`

`True` if `x in a`

### instantiate { #fastcore.basics.instantiate }

`basics.instantiate(t)`

Instantiate `t` if it's a type, otherwise do nothing

### is_array { #fastcore.basics.is_array }

`basics.is_array(x)`

`True` if `x` supports `__array__` or `iloc`

### last_index { #fastcore.basics.last_index }

`basics.last_index(x, o)`

Finds the last index of occurence of `x` in `o` (returns -1 if no occurence)

### listify { #fastcore.basics.listify }

`basics.listify(o=None, *rest, use_list=False, match=None)`

Convert `o` to a `list`

### loop_first { #fastcore.basics.loop_first }

`basics.loop_first(values)`

Iterate and generate a tuple with a flag for first value.

### loop_first_last { #fastcore.basics.loop_first_last }

`basics.loop_first_last(values)`

Iterate and generate a tuple with a flag for first and last value.

### loop_last { #fastcore.basics.loop_last }

`basics.loop_last(values)`

Iterate and generate a tuple with a flag for last value.

### map_ex { #fastcore.basics.map_ex }

`basics.map_ex(iterable, f, *args, gen=False, **kwargs)`

Like `map`, but use `bind`, and supports `str` and indexing

### maps { #fastcore.basics.maps }

`basics.maps(*args, retain=noop)`

Like `map`, except funcs are composed first

### mapt { #fastcore.basics.mapt }

`basics.mapt(func, *iterables)`

Tuplified `map`

### maybe_attr { #fastcore.basics.maybe_attr }

`basics.maybe_attr(o, attr)`

`getattr(o,attr,o)`

### merge { #fastcore.basics.merge }

`basics.merge(*ds)`

Merge all dictionaries in `ds`

### mk_class { #fastcore.basics.mk_class }

`basics.mk_class(nm, *fld_names, sup=None, doc=None, funcs=None, mod=None, **flds)`

Create a class using `get_class` and add to the caller's module

### nested_attr { #fastcore.basics.nested_attr }

`basics.nested_attr(o, attr, default=None)`

Same as `getattr`, but if `attr` includes a `.`, then looks inside nested objects

### nested_callable { #fastcore.basics.nested_callable }

`basics.nested_callable(o, attr)`

Same as `nested_attr` but if not found will return `noop`

### nested_idx { #fastcore.basics.nested_idx }

`basics.nested_idx(coll, *idxs)`

Index into nested collections, dicts, etc, with `idxs`

### nested_setdefault { #fastcore.basics.nested_setdefault }

`basics.nested_setdefault(o, attr, default)`

Same as `setdefault`, but if `attr` includes a `.`, then looks inside nested objects

### not_ { #fastcore.basics.not_ }

`basics.not_(f)`

Create new function that negates result of `f`

### num_cpus { #fastcore.basics.num_cpus }

`basics.num_cpus()`

Get number of cpus

### only { #fastcore.basics.only }

`basics.only(o)`

Return the only item of `o`, raise if `o` doesn't have exactly one item

### otherwise { #fastcore.basics.otherwise }

`basics.otherwise(x, tst, y)`

`y if tst(x) else x`

### partialler { #fastcore.basics.partialler }

`basics.partialler(f, *args, order=None, **kwargs)`

Like `functools.partial` but also copies over docstring

### patch { #fastcore.basics.patch }

`basics.patch(f=None, *, as_prop=False, cls_method=False)`

Decorator: add `f` to the first parameter's class (based on f's type annotations)

### patch_property { #fastcore.basics.patch_property }

`basics.patch_property(f)`

Deprecated; use `patch(as_prop=True)` instead

### patch_to { #fastcore.basics.patch_to }

`basics.patch_to(cls, as_prop=False, cls_method=False)`

Decorator: add `f` to `cls`

### properties { #fastcore.basics.properties }

`basics.properties(cls, *ps)`

Change attrs in `cls` with names in `ps` to properties

### range_of { #fastcore.basics.range_of }

`basics.range_of(a, b=None, step=None)`

All indices of collection `a`, if `a` is a collection, otherwise `range`

### renumerate { #fastcore.basics.renumerate }

`basics.renumerate(iterable, start=0)`

Same as `enumerate`, but returns index as 2nd element instead of 1st

### replicate { #fastcore.basics.replicate }

`basics.replicate(item, match)`

Create tuple of `item` copied `len(match)` times

### ret_false { #fastcore.basics.ret_false }

`basics.ret_false(*args, **kwargs)`

Predicate: always `False`

### ret_true { #fastcore.basics.ret_true }

`basics.ret_true(*args, **kwargs)`

Predicate: always `True`

### risinstance { #fastcore.basics.risinstance }

`basics.risinstance(types, obj=None)`

Curried `isinstance` but with args reversed

### set_nested_idx { #fastcore.basics.set_nested_idx }

`basics.set_nested_idx(coll, value, *idxs)`

Set value indexed like `nested_idx

### setattrs { #fastcore.basics.setattrs }

`basics.setattrs(dest, flds, src)`

### setify { #fastcore.basics.setify }

`basics.setify(o)`

Turn any list like-object into a set.

### signature_ex { #fastcore.basics.signature_ex }

`basics.signature_ex(obj, eval_str=False)`

Backport of `inspect.signature(..., eval_str=True` to <py310

### snake2camel { #fastcore.basics.snake2camel }

`basics.snake2camel(s)`

Convert snake_case to CamelCase

### sorted_ex { #fastcore.basics.sorted_ex }

`basics.sorted_ex(iterable, key=None, reverse=False)`

Like `sorted`, but if key is str use `attrgetter`; if int use `itemgetter`

### stop { #fastcore.basics.stop }

`basics.stop(e=StopIteration)`

Raises exception `e` (by default `StopException`)

### store_attr { #fastcore.basics.store_attr }

`basics.store_attr(names=None, self=None, but='', cast=False, store_args=None, **attrs)`

Store params named in comma-separated `names` from calling context into attrs in `self`

### str2bool { #fastcore.basics.str2bool }

`basics.str2bool(s)`

Case-insensitive convert string `s` too a bool (`y`,`yes`,`t`,`true`,`on`,`1`->`True`)

### str_enum { #fastcore.basics.str_enum }

`basics.str_enum(name, *vals)`

Simplified creation of `StrEnum` types

### strcat { #fastcore.basics.strcat }

`basics.strcat(its, sep='')`

Concatenate stringified items `its`

### true { #fastcore.basics.true }

`basics.true(x)`

Test whether `x` is truthy; collections with >0 elements are considered `True`

### try_attrs { #fastcore.basics.try_attrs }

`basics.try_attrs(obj, *attrs)`

Return first attr that exists in `obj`

### tuplify { #fastcore.basics.tuplify }

`basics.tuplify(o, use_list=False, match=None)`

Make `o` a tuple

### type_hints { #fastcore.basics.type_hints }

`basics.type_hints(f)`

Like `typing.get_type_hints` but returns `{}` if not allowed type

### typed { #fastcore.basics.typed }

`basics.typed(f)`

Decorator to check param and return types at runtime

### union2tuple { #fastcore.basics.union2tuple }

`basics.union2tuple(t)`

### uniqueify { #fastcore.basics.uniqueify }

`basics.uniqueify(x, sort=False, bidir=False, start=None)`

Unique elements in `x`, optional `sort`, optional return reverse correspondence, optional prepend with elements.

### using_attr { #fastcore.basics.using_attr }

`basics.using_attr(f, attr)`

Construct a function which applies `f` to the argument's attribute `attr`

### val2idx { #fastcore.basics.val2idx }

`basics.val2idx(x)`

Dict from value to index

### with_cast { #fastcore.basics.with_cast }

`basics.with_cast(f)`

Decorator which uses any parameter annotations as preprocessing functions

### wrap_class { #fastcore.basics.wrap_class }

`basics.wrap_class(nm, *fld_names, sup=None, doc=None, funcs=None, **flds)`

Decorator: makes function a method of a new class `nm` passing parameters to `mk_class`

### zip_cycle { #fastcore.basics.zip_cycle }

`basics.zip_cycle(x, *args)`

Like `itertools.zip_longest` but `cycle`s through elements of all but first argument