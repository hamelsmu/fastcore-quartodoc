[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": ".",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reference/meta.html",
    "href": "reference/meta.html",
    "title": "meta",
    "section": "",
    "text": "meta\n\n\n\n\n\nName\nDescription\n\n\n\n\nanno_dict\n__annotation__ dictionary withemptycast toNone, returning empty if doesn't exist | | [delegates](#fastcore.meta.delegates) | Decorator: replacekwargsin signature with params fromto| | [empty2none](#fastcore.meta.empty2none) | ReplaceParameter.emptywithNone| | [funcs_kwargs](#fastcore.meta.funcs_kwargs) | Replace methods incls._methodswith those fromkwargs| | [method](#fastcore.meta.method) | Markfas a method | | [test_sig](#fastcore.meta.test_sig) | Test the signature of an object | | [use_kwargs](#fastcore.meta.use_kwargs) | Decorator: replacekwargsin signature withnamesparams | | [use_kwargs_dict](#fastcore.meta.use_kwargs_dict) | Decorator: replace**kwargsin signature withnames` params\n\n\n\n\n\nmeta.anno_dict(f)\n__annotation__ dictionary withemptycast toNone`, returning empty if doesn’t exist\n\n\n\nmeta.delegates(to=None, keep=False, but=None)\nDecorator: replace **kwargs in signature with params from to\n\n\n\nmeta.empty2none(p)\nReplace Parameter.empty with None\n\n\n\nmeta.funcs_kwargs(as_method=False)\nReplace methods in cls._methods with those from kwargs\n\n\n\nmeta.method(f)\nMark f as a method\n\n\n\nmeta.test_sig(f, b)\nTest the signature of an object\n\n\n\nmeta.use_kwargs(names, keep=False)\nDecorator: replace **kwargs in signature with names params\n\n\n\nmeta.use_kwargs_dict(keep=False, **kwargs)\nDecorator: replace **kwargs in signature with names params"
  },
  {
    "objectID": "reference/meta.html#functions",
    "href": "reference/meta.html#functions",
    "title": "meta",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nanno_dict\n__annotation__ dictionary withemptycast toNone, returning empty if doesn't exist | | [delegates](#fastcore.meta.delegates) | Decorator: replacekwargsin signature with params fromto| | [empty2none](#fastcore.meta.empty2none) | ReplaceParameter.emptywithNone| | [funcs_kwargs](#fastcore.meta.funcs_kwargs) | Replace methods incls._methodswith those fromkwargs| | [method](#fastcore.meta.method) | Markfas a method | | [test_sig](#fastcore.meta.test_sig) | Test the signature of an object | | [use_kwargs](#fastcore.meta.use_kwargs) | Decorator: replacekwargsin signature withnamesparams | | [use_kwargs_dict](#fastcore.meta.use_kwargs_dict) | Decorator: replace**kwargsin signature withnames` params\n\n\n\n\n\nmeta.anno_dict(f)\n__annotation__ dictionary withemptycast toNone`, returning empty if doesn’t exist\n\n\n\nmeta.delegates(to=None, keep=False, but=None)\nDecorator: replace **kwargs in signature with params from to\n\n\n\nmeta.empty2none(p)\nReplace Parameter.empty with None\n\n\n\nmeta.funcs_kwargs(as_method=False)\nReplace methods in cls._methods with those from kwargs\n\n\n\nmeta.method(f)\nMark f as a method\n\n\n\nmeta.test_sig(f, b)\nTest the signature of an object\n\n\n\nmeta.use_kwargs(names, keep=False)\nDecorator: replace **kwargs in signature with names params\n\n\n\nmeta.use_kwargs_dict(keep=False, **kwargs)\nDecorator: replace **kwargs in signature with names params"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "Utilities for documentation.\n\n\n\nfunctions\n\n\n\nfunctions.web_endpoint"
  },
  {
    "objectID": "reference/index.html#general-utilities",
    "href": "reference/index.html#general-utilities",
    "title": "Function reference",
    "section": "",
    "text": "General purpose utilities.\n\n\n\nclient\n\n\n\nfunctions\n\n\n\ngpu"
  },
  {
    "objectID": "reference/index.html#documentation-utilities",
    "href": "reference/index.html#documentation-utilities",
    "title": "Function reference",
    "section": "",
    "text": "Utilities for documentation.\n\n\n\nfunctions\n\n\n\nfunctions.web_endpoint"
  },
  {
    "objectID": "reference/utils.html",
    "href": "reference/utils.html",
    "title": "utils",
    "section": "",
    "text": "utils\nutils"
  },
  {
    "objectID": "reference/docments.html",
    "href": "reference/docments.html",
    "title": "docments",
    "section": "",
    "text": "docments\n\n\n\n\n\nName\nDescription\n\n\n\n\nempty\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ndocments\nGenerates a docment\n\n\ndocstring\nGet docstring for sym for functions ad classes\n\n\nget_dataclass_source\nGet source code for dataclass s\n\n\nget_name\nGet the name of obj\n\n\nget_source\nGet source code for string, function object or dataclass s\n\n\nisdataclass\nCheck if s is a dataclass but not a dataclass’ instance\n\n\nparse_docstring\nParse a numpy-style docstring in sym\n\n\nqual_name\nGet the qualified name of obj\n\n\n\n\n\ndocments.docments(elt, full=False, **kwargs)\nGenerates a docment\n\n\n\ndocments.docstring(sym)\nGet docstring for sym for functions ad classes\n\n\n\ndocments.get_dataclass_source(s)\nGet source code for dataclass s\n\n\n\ndocments.get_name(obj)\nGet the name of obj\n\n\n\ndocments.get_source(s)\nGet source code for string, function object or dataclass s\n\n\n\ndocments.isdataclass(s)\nCheck if s is a dataclass but not a dataclass’ instance\n\n\n\ndocments.parse_docstring(sym)\nParse a numpy-style docstring in sym\n\n\n\ndocments.qual_name(obj)\nGet the qualified name of obj"
  },
  {
    "objectID": "reference/docments.html#attributes",
    "href": "reference/docments.html#attributes",
    "title": "docments",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nempty"
  },
  {
    "objectID": "reference/docments.html#functions",
    "href": "reference/docments.html#functions",
    "title": "docments",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ndocments\nGenerates a docment\n\n\ndocstring\nGet docstring for sym for functions ad classes\n\n\nget_dataclass_source\nGet source code for dataclass s\n\n\nget_name\nGet the name of obj\n\n\nget_source\nGet source code for string, function object or dataclass s\n\n\nisdataclass\nCheck if s is a dataclass but not a dataclass’ instance\n\n\nparse_docstring\nParse a numpy-style docstring in sym\n\n\nqual_name\nGet the qualified name of obj\n\n\n\n\n\ndocments.docments(elt, full=False, **kwargs)\nGenerates a docment\n\n\n\ndocments.docstring(sym)\nGet docstring for sym for functions ad classes\n\n\n\ndocments.get_dataclass_source(s)\nGet source code for dataclass s\n\n\n\ndocments.get_name(obj)\nGet the name of obj\n\n\n\ndocments.get_source(s)\nGet source code for string, function object or dataclass s\n\n\n\ndocments.isdataclass(s)\nCheck if s is a dataclass but not a dataclass’ instance\n\n\n\ndocments.parse_docstring(sym)\nParse a numpy-style docstring in sym\n\n\n\ndocments.qual_name(obj)\nGet the qualified name of obj"
  },
  {
    "objectID": "reference/docscrape.html",
    "href": "reference/docscrape.html",
    "title": "docscrape",
    "section": "",
    "text": "docscrape\nParse numpy-style docstrings\n\n\n\n\n\nName\nDescription\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ndedent_lines\nDeindent a list of lines maximally\n\n\nstrip_blank_lines\nRemove leading and trailing blank lines from a list of lines\n\n\n\n\n\ndocscrape.dedent_lines(lines, split=True)\nDeindent a list of lines maximally\n\n\n\ndocscrape.strip_blank_lines(l)\nRemove leading and trailing blank lines from a list of lines"
  },
  {
    "objectID": "reference/docscrape.html#attributes",
    "href": "reference/docscrape.html#attributes",
    "title": "docscrape",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nParameter"
  },
  {
    "objectID": "reference/docscrape.html#functions",
    "href": "reference/docscrape.html#functions",
    "title": "docscrape",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ndedent_lines\nDeindent a list of lines maximally\n\n\nstrip_blank_lines\nRemove leading and trailing blank lines from a list of lines\n\n\n\n\n\ndocscrape.dedent_lines(lines, split=True)\nDeindent a list of lines maximally\n\n\n\ndocscrape.strip_blank_lines(l)\nRemove leading and trailing blank lines from a list of lines"
  },
  {
    "objectID": "reference/basics.html",
    "href": "reference/basics.html",
    "title": "basics",
    "section": "",
    "text": "basics\n\n\n\n\n\nName\nDescription\n\n\n\n\nSelf\n\n\n\narg0\n\n\n\narg1\n\n\n\narg2\n\n\n\narg3\n\n\n\narg4\n\n\n\ndefaults\n\n\n\ninum_methods\n\n\n\nnum_methods\n\n\n\nrnum_methods\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_props\nCreate properties passing each of range(n) to f\n\n\nanno_ret\nGet the return annotation of func\n\n\nannotations\nAnnotations for o, or type(o)\n\n\nargnames\nNames of arguments to function or frame f\n\n\nargwhere\nLike filter_ex, but return indices for matching items\n\n\nattrdict\nDict from each k in ks to getattr(o,k)\n\n\nbasic_repr\nMinimal __repr__\n\n\ncamel2snake\nConvert CamelCase to snake_case\n\n\ncamel2words\nConvert CamelCase to ‘spaced words’\n\n\nchunked\nReturn batches from iterator it of size chunk_sz (or return n_chunks total)\n\n\nclass2attr\nReturn the snake-cased name of the class; strip ending cls_name if it exists.\n\n\ncompile_re\nCompile pat if it’s not None\n\n\ncompose\nCreate a function that composes all functions in funcs, passing along remaining *args and **kwargs to all\n\n\nconcat\nConcatenate all collections and items as a list\n\n\ncopy_func\nCopy a non-builtin function (NB copy.copy does not work for this)\n\n\ncustom_dir\nImplement custom __dir__, adding add to cls\n\n\ncycle\nLike itertools.cycle except creates list of Nones if o is empty\n\n\ndelegate_attr\nUse in __getattr__ to delegate to attr to without inheriting from GetAttr\n\n\ndetuplify\nIf x is a tuple with one thing, extract it\n\n\neval_type\neval a type or collection of types, if needed, for annotations in py3.10+\n\n\neven_mults\nBuild log-stepped array from start to stop in n steps.\n\n\nexec_import\nImport sym from mod in a new environment\n\n\nexec_local\nCall exec on code and return the var var_name | | [exec_new](#fastcore.basics.exec_new) | Executecodein a new environment and return it | | [filter_dict](#fastcore.basics.filter_dict) | Filter adictusingfunc, applied to keys and values | | [filter_ex](#fastcore.basics.filter_ex) | Likefilter, but passingkwargstof, defaultingftonoop, and addingnegateandgen| | [filter_keys](#fastcore.basics.filter_keys) | Filter adictusingfunc, applied to keys | | [filter_values](#fastcore.basics.filter_values) | Filter adictusingfunc, applied to values | | [first](#fastcore.basics.first) | First element ofx, optionally filtered byf, or None if missing | | [flatten](#fastcore.basics.flatten) | Concatenate all collections and items as a generator | | [gen](#fastcore.basics.gen) | Like(func(o) for o in seq if cond(func(o)))but handlesStopIteration| | [get_annotations_ex](#fastcore.basics.get_annotations_ex) | Backport of py3.10get_annotationsthat returns globals/locals | | [get_class](#fastcore.basics.get_class) | Dynamically create a class, optionally inheriting fromsup, containingfld_names| | [getattrs](#fastcore.basics.getattrs) | List of allattrsino| | [getcallable](#fastcore.basics.getcallable) | Callsgetattrwith a default ofnoop| | [groupby](#fastcore.basics.groupby) | Likeitertools.groupbybut doesn't need to be sorted, and isn't lazy, plus some extensions | | [hasattrs](#fastcore.basics.hasattrs) | Test whetherocontains allattrs| | [ifnone](#fastcore.basics.ifnone) |bifais None elsea| | [in_](#fastcore.basics.in_) |Trueifx in a| | [instantiate](#fastcore.basics.instantiate) | Instantiatetif it's a type, otherwise do nothing | | [is_array](#fastcore.basics.is_array) |Trueifxsupportsarrayoriloc| | [last_index](#fastcore.basics.last_index) | Finds the last index of occurence ofxino(returns -1 if no occurence) | | [listify](#fastcore.basics.listify) | Convertoto alist| | [loop_first](#fastcore.basics.loop_first) | Iterate and generate a tuple with a flag for first value. | | [loop_first_last](#fastcore.basics.loop_first_last) | Iterate and generate a tuple with a flag for first and last value. | | [loop_last](#fastcore.basics.loop_last) | Iterate and generate a tuple with a flag for last value. | | [map_ex](#fastcore.basics.map_ex) | Likemap, but usebind, and supportsstrand indexing | | [maps](#fastcore.basics.maps) | Likemap, except funcs are composed first | | [mapt](#fastcore.basics.mapt) | Tuplifiedmap| | [maybe_attr](#fastcore.basics.maybe_attr) |getattr(o,attr,o)| | [merge](#fastcore.basics.merge) | Merge all dictionaries inds| | [mk_class](#fastcore.basics.mk_class) | Create a class usingget_classand add to the caller's module | | [nested_attr](#fastcore.basics.nested_attr) | Same asgetattr, but ifattrincludes a., then looks inside nested objects | | [nested_callable](#fastcore.basics.nested_callable) | Same asnested_attrbut if not found will returnnoop| | [nested_idx](#fastcore.basics.nested_idx) | Index into nested collections, dicts, etc, withidxs| | [nested_setdefault](#fastcore.basics.nested_setdefault) | Same assetdefault, but ifattrincludes a., then looks inside nested objects | | [not_](#fastcore.basics.not_) | Create new function that negates result off| | [num_cpus](#fastcore.basics.num_cpus) | Get number of cpus | | [only](#fastcore.basics.only) | Return the only item ofo, raise ifodoesn't have exactly one item | | [otherwise](#fastcore.basics.otherwise) |y if tst(x) else x| | [partialler](#fastcore.basics.partialler) | Likefunctools.partialbut also copies over docstring | | [patch](#fastcore.basics.patch) | Decorator: addfto the first parameter's class (based on f's type annotations) | | [patch_property](#fastcore.basics.patch_property) | Deprecated; usepatch(as_prop=True)instead | | [patch_to](#fastcore.basics.patch_to) | Decorator: addftocls| | [properties](#fastcore.basics.properties) | Change attrs inclswith names inpsto properties | | [range_of](#fastcore.basics.range_of) | All indices of collectiona, ifais a collection, otherwiserange| | [renumerate](#fastcore.basics.renumerate) | Same asenumerate, but returns index as 2nd element instead of 1st | | [replicate](#fastcore.basics.replicate) | Create tuple ofitemcopiedlen(match)times | | [ret_false](#fastcore.basics.ret_false) | Predicate: alwaysFalse| | [ret_true](#fastcore.basics.ret_true) | Predicate: alwaysTrue| | [risinstance](#fastcore.basics.risinstance) | Curriedisinstancebut with args reversed | | [set_nested_idx](#fastcore.basics.set_nested_idx) | Set value indexed likenested_idx\n\n\nsetattrs\n\n\n\nsetify\nTurn any list like-object into a set.\n\n\nsignature_ex\nBackport of inspect.signature(..., eval_str=True to &lt;py310\n\n\nsnake2camel\nConvert snake_case to CamelCase\n\n\nsorted_ex\nLike sorted, but if key is str use attrgetter; if int use itemgetter\n\n\nstop\nRaises exception e (by default StopException)\n\n\nstore_attr\nStore params named in comma-separated names from calling context into attrs in self\n\n\nstr2bool\nCase-insensitive convert string s too a bool (y,yes,t,true,on,1-&gt;True)\n\n\nstr_enum\nSimplified creation of StrEnum types\n\n\nstrcat\nConcatenate stringified items its\n\n\ntrue\nTest whether x is truthy; collections with &gt;0 elements are considered True\n\n\ntry_attrs\nReturn first attr that exists in obj\n\n\ntuplify\nMake o a tuple\n\n\ntype_hints\nLike typing.get_type_hints but returns {} if not allowed type\n\n\ntyped\nDecorator to check param and return types at runtime\n\n\nunion2tuple\n\n\n\nuniqueify\nUnique elements in x, optional sort, optional return reverse correspondence, optional prepend with elements.\n\n\nusing_attr\nConstruct a function which applies f to the argument’s attribute attr\n\n\nval2idx\nDict from value to index\n\n\nwith_cast\nDecorator which uses any parameter annotations as preprocessing functions\n\n\nwrap_class\nDecorator: makes function a method of a new class nm passing parameters to mk_class\n\n\nzip_cycle\nLike itertools.zip_longest but cycles through elements of all but first argument\n\n\n\n\n\nbasics.add_props(f, g=None, n=2)\nCreate properties passing each of range(n) to f\n\n\n\nbasics.anno_ret(func)\nGet the return annotation of func\n\n\n\nbasics.annotations(o)\nAnnotations for o, or type(o)\n\n\n\nbasics.argnames(f, frame=False)\nNames of arguments to function or frame f\n\n\n\nbasics.argwhere(iterable, f, negate=False, **kwargs)\nLike filter_ex, but return indices for matching items\n\n\n\nbasics.attrdict(o, *ks, default=None)\nDict from each k in ks to getattr(o,k)\n\n\n\nbasics.basic_repr(flds=None)\nMinimal __repr__\n\n\n\nbasics.camel2snake(name)\nConvert CamelCase to snake_case\n\n\n\nbasics.camel2words(s, space=' ')\nConvert CamelCase to ‘spaced words’\n\n\n\nbasics.chunked(it, chunk_sz=None, drop_last=False, n_chunks=None)\nReturn batches from iterator it of size chunk_sz (or return n_chunks total)\n\n\n\nbasics.class2attr(self, cls_name)\nReturn the snake-cased name of the class; strip ending cls_name if it exists.\n\n\n\nbasics.compile_re(pat)\nCompile pat if it’s not None\n\n\n\nbasics.compose(*funcs, order=None)\nCreate a function that composes all functions in funcs, passing along remaining *args and **kwargs to all\n\n\n\nbasics.concat(colls)\nConcatenate all collections and items as a list\n\n\n\nbasics.copy_func(f)\nCopy a non-builtin function (NB copy.copy does not work for this)\n\n\n\nbasics.custom_dir(c, add)\nImplement custom __dir__, adding add to cls\n\n\n\nbasics.cycle(o)\nLike itertools.cycle except creates list of Nones if o is empty\n\n\n\nbasics.delegate_attr(self, k, to)\nUse in __getattr__ to delegate to attr to without inheriting from GetAttr\n\n\n\nbasics.detuplify(x)\nIf x is a tuple with one thing, extract it\n\n\n\nbasics.eval_type(t, glb, loc)\neval a type or collection of types, if needed, for annotations in py3.10+\n\n\n\nbasics.even_mults(start, stop, n)\nBuild log-stepped array from start to stop in n steps.\n\n\n\nbasics.exec_import(mod, sym)\nImport sym from mod in a new environment\n\n\n\nbasics.exec_local(code, var_name)\nCall exec on code and return the var `var_name\n\n\n\nbasics.exec_new(code)\nExecute code in a new environment and return it\n\n\n\nbasics.filter_dict(d, func)\nFilter a dict using func, applied to keys and values\n\n\n\nbasics.filter_ex(iterable, f=noop, negate=False, gen=False, **kwargs)\nLike filter, but passing kwargs to f, defaulting f to noop, and adding negate and gen\n\n\n\nbasics.filter_keys(d, func)\nFilter a dict using func, applied to keys\n\n\n\nbasics.filter_values(d, func)\nFilter a dict using func, applied to values\n\n\n\nbasics.first(x, f=None, negate=False, **kwargs)\nFirst element of x, optionally filtered by f, or None if missing\n\n\n\nbasics.flatten(o)\nConcatenate all collections and items as a generator\n\n\n\nbasics.gen(func, seq, cond=ret_true)\nLike (func(o) for o in seq if cond(func(o))) but handles StopIteration\n\n\n\nbasics.get_annotations_ex(obj, *, globals=None, locals=None)\nBackport of py3.10 get_annotations that returns globals/locals\n\n\n\nbasics.get_class(nm, *fld_names, sup=None, doc=None, funcs=None, **flds)\nDynamically create a class, optionally inheriting from sup, containing fld_names\n\n\n\nbasics.getattrs(o, *attrs, default=None)\nList of all attrs in o\n\n\n\nbasics.getcallable(o, attr)\nCalls getattr with a default of noop\n\n\n\nbasics.groupby(x, key, val=noop)\nLike itertools.groupby but doesn’t need to be sorted, and isn’t lazy, plus some extensions\n\n\n\nbasics.hasattrs(o, attrs)\nTest whether o contains all attrs\n\n\n\nbasics.ifnone(a, b)\nb if a is None else a\n\n\n\nbasics.in_(x, a)\nTrue if x in a\n\n\n\nbasics.instantiate(t)\nInstantiate t if it’s a type, otherwise do nothing\n\n\n\nbasics.is_array(x)\nTrue if x supports __array__ or iloc\n\n\n\nbasics.last_index(x, o)\nFinds the last index of occurence of x in o (returns -1 if no occurence)\n\n\n\nbasics.listify(o=None, *rest, use_list=False, match=None)\nConvert o to a list\n\n\n\nbasics.loop_first(values)\nIterate and generate a tuple with a flag for first value.\n\n\n\nbasics.loop_first_last(values)\nIterate and generate a tuple with a flag for first and last value.\n\n\n\nbasics.loop_last(values)\nIterate and generate a tuple with a flag for last value.\n\n\n\nbasics.map_ex(iterable, f, *args, gen=False, **kwargs)\nLike map, but use bind, and supports str and indexing\n\n\n\nbasics.maps(*args, retain=noop)\nLike map, except funcs are composed first\n\n\n\nbasics.mapt(func, *iterables)\nTuplified map\n\n\n\nbasics.maybe_attr(o, attr)\ngetattr(o,attr,o)\n\n\n\nbasics.merge(*ds)\nMerge all dictionaries in ds\n\n\n\nbasics.mk_class(nm, *fld_names, sup=None, doc=None, funcs=None, mod=None, **flds)\nCreate a class using get_class and add to the caller’s module\n\n\n\nbasics.nested_attr(o, attr, default=None)\nSame as getattr, but if attr includes a ., then looks inside nested objects\n\n\n\nbasics.nested_callable(o, attr)\nSame as nested_attr but if not found will return noop\n\n\n\nbasics.nested_idx(coll, *idxs)\nIndex into nested collections, dicts, etc, with idxs\n\n\n\nbasics.nested_setdefault(o, attr, default)\nSame as setdefault, but if attr includes a ., then looks inside nested objects\n\n\n\nbasics.not_(f)\nCreate new function that negates result of f\n\n\n\nbasics.num_cpus()\nGet number of cpus\n\n\n\nbasics.only(o)\nReturn the only item of o, raise if o doesn’t have exactly one item\n\n\n\nbasics.otherwise(x, tst, y)\ny if tst(x) else x\n\n\n\nbasics.partialler(f, *args, order=None, **kwargs)\nLike functools.partial but also copies over docstring\n\n\n\nbasics.patch(f=None, *, as_prop=False, cls_method=False)\nDecorator: add f to the first parameter’s class (based on f’s type annotations)\n\n\n\nbasics.patch_property(f)\nDeprecated; use patch(as_prop=True) instead\n\n\n\nbasics.patch_to(cls, as_prop=False, cls_method=False)\nDecorator: add f to cls\n\n\n\nbasics.properties(cls, *ps)\nChange attrs in cls with names in ps to properties\n\n\n\nbasics.range_of(a, b=None, step=None)\nAll indices of collection a, if a is a collection, otherwise range\n\n\n\nbasics.renumerate(iterable, start=0)\nSame as enumerate, but returns index as 2nd element instead of 1st\n\n\n\nbasics.replicate(item, match)\nCreate tuple of item copied len(match) times\n\n\n\nbasics.ret_false(*args, **kwargs)\nPredicate: always False\n\n\n\nbasics.ret_true(*args, **kwargs)\nPredicate: always True\n\n\n\nbasics.risinstance(types, obj=None)\nCurried isinstance but with args reversed\n\n\n\nbasics.set_nested_idx(coll, value, *idxs)\nSet value indexed like `nested_idx\n\n\n\nbasics.setattrs(dest, flds, src)\n\n\n\nbasics.setify(o)\nTurn any list like-object into a set.\n\n\n\nbasics.signature_ex(obj, eval_str=False)\nBackport of inspect.signature(..., eval_str=True to &lt;py310\n\n\n\nbasics.snake2camel(s)\nConvert snake_case to CamelCase\n\n\n\nbasics.sorted_ex(iterable, key=None, reverse=False)\nLike sorted, but if key is str use attrgetter; if int use itemgetter\n\n\n\nbasics.stop(e=StopIteration)\nRaises exception e (by default StopException)\n\n\n\nbasics.store_attr(names=None, self=None, but='', cast=False, store_args=None, **attrs)\nStore params named in comma-separated names from calling context into attrs in self\n\n\n\nbasics.str2bool(s)\nCase-insensitive convert string s too a bool (y,yes,t,true,on,1-&gt;True)\n\n\n\nbasics.str_enum(name, *vals)\nSimplified creation of StrEnum types\n\n\n\nbasics.strcat(its, sep='')\nConcatenate stringified items its\n\n\n\nbasics.true(x)\nTest whether x is truthy; collections with &gt;0 elements are considered True\n\n\n\nbasics.try_attrs(obj, *attrs)\nReturn first attr that exists in obj\n\n\n\nbasics.tuplify(o, use_list=False, match=None)\nMake o a tuple\n\n\n\nbasics.type_hints(f)\nLike typing.get_type_hints but returns {} if not allowed type\n\n\n\nbasics.typed(f)\nDecorator to check param and return types at runtime\n\n\n\nbasics.union2tuple(t)\n\n\n\nbasics.uniqueify(x, sort=False, bidir=False, start=None)\nUnique elements in x, optional sort, optional return reverse correspondence, optional prepend with elements.\n\n\n\nbasics.using_attr(f, attr)\nConstruct a function which applies f to the argument’s attribute attr\n\n\n\nbasics.val2idx(x)\nDict from value to index\n\n\n\nbasics.with_cast(f)\nDecorator which uses any parameter annotations as preprocessing functions\n\n\n\nbasics.wrap_class(nm, *fld_names, sup=None, doc=None, funcs=None, **flds)\nDecorator: makes function a method of a new class nm passing parameters to mk_class\n\n\n\nbasics.zip_cycle(x, *args)\nLike itertools.zip_longest but cycles through elements of all but first argument"
  },
  {
    "objectID": "reference/basics.html#attributes",
    "href": "reference/basics.html#attributes",
    "title": "basics",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nSelf\n\n\n\narg0\n\n\n\narg1\n\n\n\narg2\n\n\n\narg3\n\n\n\narg4\n\n\n\ndefaults\n\n\n\ninum_methods\n\n\n\nnum_methods\n\n\n\nrnum_methods"
  },
  {
    "objectID": "reference/basics.html#functions",
    "href": "reference/basics.html#functions",
    "title": "basics",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nadd_props\nCreate properties passing each of range(n) to f\n\n\nanno_ret\nGet the return annotation of func\n\n\nannotations\nAnnotations for o, or type(o)\n\n\nargnames\nNames of arguments to function or frame f\n\n\nargwhere\nLike filter_ex, but return indices for matching items\n\n\nattrdict\nDict from each k in ks to getattr(o,k)\n\n\nbasic_repr\nMinimal __repr__\n\n\ncamel2snake\nConvert CamelCase to snake_case\n\n\ncamel2words\nConvert CamelCase to ‘spaced words’\n\n\nchunked\nReturn batches from iterator it of size chunk_sz (or return n_chunks total)\n\n\nclass2attr\nReturn the snake-cased name of the class; strip ending cls_name if it exists.\n\n\ncompile_re\nCompile pat if it’s not None\n\n\ncompose\nCreate a function that composes all functions in funcs, passing along remaining *args and **kwargs to all\n\n\nconcat\nConcatenate all collections and items as a list\n\n\ncopy_func\nCopy a non-builtin function (NB copy.copy does not work for this)\n\n\ncustom_dir\nImplement custom __dir__, adding add to cls\n\n\ncycle\nLike itertools.cycle except creates list of Nones if o is empty\n\n\ndelegate_attr\nUse in __getattr__ to delegate to attr to without inheriting from GetAttr\n\n\ndetuplify\nIf x is a tuple with one thing, extract it\n\n\neval_type\neval a type or collection of types, if needed, for annotations in py3.10+\n\n\neven_mults\nBuild log-stepped array from start to stop in n steps.\n\n\nexec_import\nImport sym from mod in a new environment\n\n\nexec_local\nCall exec on code and return the var var_name | | [exec_new](#fastcore.basics.exec_new) | Executecodein a new environment and return it | | [filter_dict](#fastcore.basics.filter_dict) | Filter adictusingfunc, applied to keys and values | | [filter_ex](#fastcore.basics.filter_ex) | Likefilter, but passingkwargstof, defaultingftonoop, and addingnegateandgen| | [filter_keys](#fastcore.basics.filter_keys) | Filter adictusingfunc, applied to keys | | [filter_values](#fastcore.basics.filter_values) | Filter adictusingfunc, applied to values | | [first](#fastcore.basics.first) | First element ofx, optionally filtered byf, or None if missing | | [flatten](#fastcore.basics.flatten) | Concatenate all collections and items as a generator | | [gen](#fastcore.basics.gen) | Like(func(o) for o in seq if cond(func(o)))but handlesStopIteration| | [get_annotations_ex](#fastcore.basics.get_annotations_ex) | Backport of py3.10get_annotationsthat returns globals/locals | | [get_class](#fastcore.basics.get_class) | Dynamically create a class, optionally inheriting fromsup, containingfld_names| | [getattrs](#fastcore.basics.getattrs) | List of allattrsino| | [getcallable](#fastcore.basics.getcallable) | Callsgetattrwith a default ofnoop| | [groupby](#fastcore.basics.groupby) | Likeitertools.groupbybut doesn't need to be sorted, and isn't lazy, plus some extensions | | [hasattrs](#fastcore.basics.hasattrs) | Test whetherocontains allattrs| | [ifnone](#fastcore.basics.ifnone) |bifais None elsea| | [in_](#fastcore.basics.in_) |Trueifx in a| | [instantiate](#fastcore.basics.instantiate) | Instantiatetif it's a type, otherwise do nothing | | [is_array](#fastcore.basics.is_array) |Trueifxsupportsarrayoriloc| | [last_index](#fastcore.basics.last_index) | Finds the last index of occurence ofxino(returns -1 if no occurence) | | [listify](#fastcore.basics.listify) | Convertoto alist| | [loop_first](#fastcore.basics.loop_first) | Iterate and generate a tuple with a flag for first value. | | [loop_first_last](#fastcore.basics.loop_first_last) | Iterate and generate a tuple with a flag for first and last value. | | [loop_last](#fastcore.basics.loop_last) | Iterate and generate a tuple with a flag for last value. | | [map_ex](#fastcore.basics.map_ex) | Likemap, but usebind, and supportsstrand indexing | | [maps](#fastcore.basics.maps) | Likemap, except funcs are composed first | | [mapt](#fastcore.basics.mapt) | Tuplifiedmap| | [maybe_attr](#fastcore.basics.maybe_attr) |getattr(o,attr,o)| | [merge](#fastcore.basics.merge) | Merge all dictionaries inds| | [mk_class](#fastcore.basics.mk_class) | Create a class usingget_classand add to the caller's module | | [nested_attr](#fastcore.basics.nested_attr) | Same asgetattr, but ifattrincludes a., then looks inside nested objects | | [nested_callable](#fastcore.basics.nested_callable) | Same asnested_attrbut if not found will returnnoop| | [nested_idx](#fastcore.basics.nested_idx) | Index into nested collections, dicts, etc, withidxs| | [nested_setdefault](#fastcore.basics.nested_setdefault) | Same assetdefault, but ifattrincludes a., then looks inside nested objects | | [not_](#fastcore.basics.not_) | Create new function that negates result off| | [num_cpus](#fastcore.basics.num_cpus) | Get number of cpus | | [only](#fastcore.basics.only) | Return the only item ofo, raise ifodoesn't have exactly one item | | [otherwise](#fastcore.basics.otherwise) |y if tst(x) else x| | [partialler](#fastcore.basics.partialler) | Likefunctools.partialbut also copies over docstring | | [patch](#fastcore.basics.patch) | Decorator: addfto the first parameter's class (based on f's type annotations) | | [patch_property](#fastcore.basics.patch_property) | Deprecated; usepatch(as_prop=True)instead | | [patch_to](#fastcore.basics.patch_to) | Decorator: addftocls| | [properties](#fastcore.basics.properties) | Change attrs inclswith names inpsto properties | | [range_of](#fastcore.basics.range_of) | All indices of collectiona, ifais a collection, otherwiserange| | [renumerate](#fastcore.basics.renumerate) | Same asenumerate, but returns index as 2nd element instead of 1st | | [replicate](#fastcore.basics.replicate) | Create tuple ofitemcopiedlen(match)times | | [ret_false](#fastcore.basics.ret_false) | Predicate: alwaysFalse| | [ret_true](#fastcore.basics.ret_true) | Predicate: alwaysTrue| | [risinstance](#fastcore.basics.risinstance) | Curriedisinstancebut with args reversed | | [set_nested_idx](#fastcore.basics.set_nested_idx) | Set value indexed likenested_idx\n\n\nsetattrs\n\n\n\nsetify\nTurn any list like-object into a set.\n\n\nsignature_ex\nBackport of inspect.signature(..., eval_str=True to &lt;py310\n\n\nsnake2camel\nConvert snake_case to CamelCase\n\n\nsorted_ex\nLike sorted, but if key is str use attrgetter; if int use itemgetter\n\n\nstop\nRaises exception e (by default StopException)\n\n\nstore_attr\nStore params named in comma-separated names from calling context into attrs in self\n\n\nstr2bool\nCase-insensitive convert string s too a bool (y,yes,t,true,on,1-&gt;True)\n\n\nstr_enum\nSimplified creation of StrEnum types\n\n\nstrcat\nConcatenate stringified items its\n\n\ntrue\nTest whether x is truthy; collections with &gt;0 elements are considered True\n\n\ntry_attrs\nReturn first attr that exists in obj\n\n\ntuplify\nMake o a tuple\n\n\ntype_hints\nLike typing.get_type_hints but returns {} if not allowed type\n\n\ntyped\nDecorator to check param and return types at runtime\n\n\nunion2tuple\n\n\n\nuniqueify\nUnique elements in x, optional sort, optional return reverse correspondence, optional prepend with elements.\n\n\nusing_attr\nConstruct a function which applies f to the argument’s attribute attr\n\n\nval2idx\nDict from value to index\n\n\nwith_cast\nDecorator which uses any parameter annotations as preprocessing functions\n\n\nwrap_class\nDecorator: makes function a method of a new class nm passing parameters to mk_class\n\n\nzip_cycle\nLike itertools.zip_longest but cycles through elements of all but first argument\n\n\n\n\n\nbasics.add_props(f, g=None, n=2)\nCreate properties passing each of range(n) to f\n\n\n\nbasics.anno_ret(func)\nGet the return annotation of func\n\n\n\nbasics.annotations(o)\nAnnotations for o, or type(o)\n\n\n\nbasics.argnames(f, frame=False)\nNames of arguments to function or frame f\n\n\n\nbasics.argwhere(iterable, f, negate=False, **kwargs)\nLike filter_ex, but return indices for matching items\n\n\n\nbasics.attrdict(o, *ks, default=None)\nDict from each k in ks to getattr(o,k)\n\n\n\nbasics.basic_repr(flds=None)\nMinimal __repr__\n\n\n\nbasics.camel2snake(name)\nConvert CamelCase to snake_case\n\n\n\nbasics.camel2words(s, space=' ')\nConvert CamelCase to ‘spaced words’\n\n\n\nbasics.chunked(it, chunk_sz=None, drop_last=False, n_chunks=None)\nReturn batches from iterator it of size chunk_sz (or return n_chunks total)\n\n\n\nbasics.class2attr(self, cls_name)\nReturn the snake-cased name of the class; strip ending cls_name if it exists.\n\n\n\nbasics.compile_re(pat)\nCompile pat if it’s not None\n\n\n\nbasics.compose(*funcs, order=None)\nCreate a function that composes all functions in funcs, passing along remaining *args and **kwargs to all\n\n\n\nbasics.concat(colls)\nConcatenate all collections and items as a list\n\n\n\nbasics.copy_func(f)\nCopy a non-builtin function (NB copy.copy does not work for this)\n\n\n\nbasics.custom_dir(c, add)\nImplement custom __dir__, adding add to cls\n\n\n\nbasics.cycle(o)\nLike itertools.cycle except creates list of Nones if o is empty\n\n\n\nbasics.delegate_attr(self, k, to)\nUse in __getattr__ to delegate to attr to without inheriting from GetAttr\n\n\n\nbasics.detuplify(x)\nIf x is a tuple with one thing, extract it\n\n\n\nbasics.eval_type(t, glb, loc)\neval a type or collection of types, if needed, for annotations in py3.10+\n\n\n\nbasics.even_mults(start, stop, n)\nBuild log-stepped array from start to stop in n steps.\n\n\n\nbasics.exec_import(mod, sym)\nImport sym from mod in a new environment\n\n\n\nbasics.exec_local(code, var_name)\nCall exec on code and return the var `var_name\n\n\n\nbasics.exec_new(code)\nExecute code in a new environment and return it\n\n\n\nbasics.filter_dict(d, func)\nFilter a dict using func, applied to keys and values\n\n\n\nbasics.filter_ex(iterable, f=noop, negate=False, gen=False, **kwargs)\nLike filter, but passing kwargs to f, defaulting f to noop, and adding negate and gen\n\n\n\nbasics.filter_keys(d, func)\nFilter a dict using func, applied to keys\n\n\n\nbasics.filter_values(d, func)\nFilter a dict using func, applied to values\n\n\n\nbasics.first(x, f=None, negate=False, **kwargs)\nFirst element of x, optionally filtered by f, or None if missing\n\n\n\nbasics.flatten(o)\nConcatenate all collections and items as a generator\n\n\n\nbasics.gen(func, seq, cond=ret_true)\nLike (func(o) for o in seq if cond(func(o))) but handles StopIteration\n\n\n\nbasics.get_annotations_ex(obj, *, globals=None, locals=None)\nBackport of py3.10 get_annotations that returns globals/locals\n\n\n\nbasics.get_class(nm, *fld_names, sup=None, doc=None, funcs=None, **flds)\nDynamically create a class, optionally inheriting from sup, containing fld_names\n\n\n\nbasics.getattrs(o, *attrs, default=None)\nList of all attrs in o\n\n\n\nbasics.getcallable(o, attr)\nCalls getattr with a default of noop\n\n\n\nbasics.groupby(x, key, val=noop)\nLike itertools.groupby but doesn’t need to be sorted, and isn’t lazy, plus some extensions\n\n\n\nbasics.hasattrs(o, attrs)\nTest whether o contains all attrs\n\n\n\nbasics.ifnone(a, b)\nb if a is None else a\n\n\n\nbasics.in_(x, a)\nTrue if x in a\n\n\n\nbasics.instantiate(t)\nInstantiate t if it’s a type, otherwise do nothing\n\n\n\nbasics.is_array(x)\nTrue if x supports __array__ or iloc\n\n\n\nbasics.last_index(x, o)\nFinds the last index of occurence of x in o (returns -1 if no occurence)\n\n\n\nbasics.listify(o=None, *rest, use_list=False, match=None)\nConvert o to a list\n\n\n\nbasics.loop_first(values)\nIterate and generate a tuple with a flag for first value.\n\n\n\nbasics.loop_first_last(values)\nIterate and generate a tuple with a flag for first and last value.\n\n\n\nbasics.loop_last(values)\nIterate and generate a tuple with a flag for last value.\n\n\n\nbasics.map_ex(iterable, f, *args, gen=False, **kwargs)\nLike map, but use bind, and supports str and indexing\n\n\n\nbasics.maps(*args, retain=noop)\nLike map, except funcs are composed first\n\n\n\nbasics.mapt(func, *iterables)\nTuplified map\n\n\n\nbasics.maybe_attr(o, attr)\ngetattr(o,attr,o)\n\n\n\nbasics.merge(*ds)\nMerge all dictionaries in ds\n\n\n\nbasics.mk_class(nm, *fld_names, sup=None, doc=None, funcs=None, mod=None, **flds)\nCreate a class using get_class and add to the caller’s module\n\n\n\nbasics.nested_attr(o, attr, default=None)\nSame as getattr, but if attr includes a ., then looks inside nested objects\n\n\n\nbasics.nested_callable(o, attr)\nSame as nested_attr but if not found will return noop\n\n\n\nbasics.nested_idx(coll, *idxs)\nIndex into nested collections, dicts, etc, with idxs\n\n\n\nbasics.nested_setdefault(o, attr, default)\nSame as setdefault, but if attr includes a ., then looks inside nested objects\n\n\n\nbasics.not_(f)\nCreate new function that negates result of f\n\n\n\nbasics.num_cpus()\nGet number of cpus\n\n\n\nbasics.only(o)\nReturn the only item of o, raise if o doesn’t have exactly one item\n\n\n\nbasics.otherwise(x, tst, y)\ny if tst(x) else x\n\n\n\nbasics.partialler(f, *args, order=None, **kwargs)\nLike functools.partial but also copies over docstring\n\n\n\nbasics.patch(f=None, *, as_prop=False, cls_method=False)\nDecorator: add f to the first parameter’s class (based on f’s type annotations)\n\n\n\nbasics.patch_property(f)\nDeprecated; use patch(as_prop=True) instead\n\n\n\nbasics.patch_to(cls, as_prop=False, cls_method=False)\nDecorator: add f to cls\n\n\n\nbasics.properties(cls, *ps)\nChange attrs in cls with names in ps to properties\n\n\n\nbasics.range_of(a, b=None, step=None)\nAll indices of collection a, if a is a collection, otherwise range\n\n\n\nbasics.renumerate(iterable, start=0)\nSame as enumerate, but returns index as 2nd element instead of 1st\n\n\n\nbasics.replicate(item, match)\nCreate tuple of item copied len(match) times\n\n\n\nbasics.ret_false(*args, **kwargs)\nPredicate: always False\n\n\n\nbasics.ret_true(*args, **kwargs)\nPredicate: always True\n\n\n\nbasics.risinstance(types, obj=None)\nCurried isinstance but with args reversed\n\n\n\nbasics.set_nested_idx(coll, value, *idxs)\nSet value indexed like `nested_idx\n\n\n\nbasics.setattrs(dest, flds, src)\n\n\n\nbasics.setify(o)\nTurn any list like-object into a set.\n\n\n\nbasics.signature_ex(obj, eval_str=False)\nBackport of inspect.signature(..., eval_str=True to &lt;py310\n\n\n\nbasics.snake2camel(s)\nConvert snake_case to CamelCase\n\n\n\nbasics.sorted_ex(iterable, key=None, reverse=False)\nLike sorted, but if key is str use attrgetter; if int use itemgetter\n\n\n\nbasics.stop(e=StopIteration)\nRaises exception e (by default StopException)\n\n\n\nbasics.store_attr(names=None, self=None, but='', cast=False, store_args=None, **attrs)\nStore params named in comma-separated names from calling context into attrs in self\n\n\n\nbasics.str2bool(s)\nCase-insensitive convert string s too a bool (y,yes,t,true,on,1-&gt;True)\n\n\n\nbasics.str_enum(name, *vals)\nSimplified creation of StrEnum types\n\n\n\nbasics.strcat(its, sep='')\nConcatenate stringified items its\n\n\n\nbasics.true(x)\nTest whether x is truthy; collections with &gt;0 elements are considered True\n\n\n\nbasics.try_attrs(obj, *attrs)\nReturn first attr that exists in obj\n\n\n\nbasics.tuplify(o, use_list=False, match=None)\nMake o a tuple\n\n\n\nbasics.type_hints(f)\nLike typing.get_type_hints but returns {} if not allowed type\n\n\n\nbasics.typed(f)\nDecorator to check param and return types at runtime\n\n\n\nbasics.union2tuple(t)\n\n\n\nbasics.uniqueify(x, sort=False, bidir=False, start=None)\nUnique elements in x, optional sort, optional return reverse correspondence, optional prepend with elements.\n\n\n\nbasics.using_attr(f, attr)\nConstruct a function which applies f to the argument’s attribute attr\n\n\n\nbasics.val2idx(x)\nDict from value to index\n\n\n\nbasics.with_cast(f)\nDecorator which uses any parameter annotations as preprocessing functions\n\n\n\nbasics.wrap_class(nm, *fld_names, sup=None, doc=None, funcs=None, **flds)\nDecorator: makes function a method of a new class nm passing parameters to mk_class\n\n\n\nbasics.zip_cycle(x, *args)\nLike itertools.zip_longest but cycles through elements of all but first argument"
  },
  {
    "objectID": "reference/inputs.html",
    "href": "reference/inputs.html",
    "title": "inputs",
    "section": "",
    "text": "inputs\ninputs\nLow-level input interfaces.\nIf you want pre-built connectors for various external systems, see bytewax.connectors. That is also a rich source of examples.\nSubclass the types here to implement input for your own custom source."
  },
  {
    "objectID": "reference/outputs.html",
    "href": "reference/outputs.html",
    "title": "outputs",
    "section": "",
    "text": "outputs\noutputs\nLow-level output interfaces.\nIf you want pre-built connectors for various external systems, see bytewax.connectors. That is also a rich source of examples.\nSubclass the types here to implement input for your own custom sink."
  },
  {
    "objectID": "reference/testing.html",
    "href": "reference/testing.html",
    "title": "testing",
    "section": "",
    "text": "testing\nHelper tools for testing dataflows.\n\n\n\n\n\nName\nDescription\n\n\n\n\npoll_next\nRepeatedly poll an input source until it returns a value.\n\n\n\n\n\ntesting.poll_next(source, timeout=timedelta(seconds=5))\nRepeatedly poll an input source until it returns a value.\nYou’ll want to use this in unit tests of sources when there’s some non-determinism in how items are read.\nArgs:\nsource: To call `source.next()` on.\nReturns:\nThe next item found.\nRaises:\nTimeoutError: If no item was returned within the timeout."
  },
  {
    "objectID": "reference/testing.html#functions",
    "href": "reference/testing.html#functions",
    "title": "testing",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\npoll_next\nRepeatedly poll an input source until it returns a value.\n\n\n\n\n\ntesting.poll_next(source, timeout=timedelta(seconds=5))\nRepeatedly poll an input source until it returns a value.\nYou’ll want to use this in unit tests of sources when there’s some non-determinism in how items are read.\nArgs:\nsource: To call `source.next()` on.\nReturns:\nThe next item found.\nRaises:\nTimeoutError: If no item was returned within the timeout."
  },
  {
    "objectID": "reference/recovery.html",
    "href": "reference/recovery.html",
    "title": "recovery",
    "section": "",
    "text": "recovery\n\n\n\nCreate a recovery config for describing how to connect to the recovery store of your choosing.\nPass that recovery config as the recovery_config argument to the entry point running your dataflow (e.g. bytewax.cluster_main()).\n\n\n\n\nMake sure your worker processes have access to the recovery store.\nThen, run your dataflow! It will start backing up recovery data automatically.\n\n\n\nIf the dataflow fails, first you must fix whatever underlying fault caused the issue. That might mean deploying new code which fixes a bug or resolving an issue with a connected system.\nOnce that is done, re-run the dataflow using the same recovery config and thus re-connect to the same recovery store. Bytewax will automatically read the progress of the previous dataflow execution and determine the most recent point that processing can resume at. Output should resume from that point.\nIf you want to fully restart a dataflow and ignore previous state, delete the data in the recovery store using whatever operational tools you have for that storage type.\n\n\n\nRecovery data for multiple dataflows must not be mixed together. See the docs for each RecoveryConfig subclass for what this means depending on the recovery store. E.g. when using a KafkaRecoveryConfig, each dataflow must have a distinct topic prefix.\nSee comments on input configuration types in bytewax.inputs for any limitations each might have regarding recovery.\nIt is possible that your output systems will see duplicate data around the resume point; design your systems to support at-least-once processing.\nCurrently it is not possible to recover a dataflow with a different number of workers than when it failed.\nThe epoch is the time unit of recovery: dataflows will only resume on epoch boundaries, with the resume epoch being where the dataflow witll resume. Bytewax defaults to a new epoch every 10 seconds. See bytewax.execution.EpochConfig for more info on epochs."
  },
  {
    "objectID": "reference/recovery.html#preparation",
    "href": "reference/recovery.html#preparation",
    "title": "recovery",
    "section": "",
    "text": "Create a recovery config for describing how to connect to the recovery store of your choosing.\nPass that recovery config as the recovery_config argument to the entry point running your dataflow (e.g. bytewax.cluster_main())."
  },
  {
    "objectID": "reference/recovery.html#execution",
    "href": "reference/recovery.html#execution",
    "title": "recovery",
    "section": "",
    "text": "Make sure your worker processes have access to the recovery store.\nThen, run your dataflow! It will start backing up recovery data automatically."
  },
  {
    "objectID": "reference/recovery.html#recovering",
    "href": "reference/recovery.html#recovering",
    "title": "recovery",
    "section": "",
    "text": "If the dataflow fails, first you must fix whatever underlying fault caused the issue. That might mean deploying new code which fixes a bug or resolving an issue with a connected system.\nOnce that is done, re-run the dataflow using the same recovery config and thus re-connect to the same recovery store. Bytewax will automatically read the progress of the previous dataflow execution and determine the most recent point that processing can resume at. Output should resume from that point.\nIf you want to fully restart a dataflow and ignore previous state, delete the data in the recovery store using whatever operational tools you have for that storage type."
  },
  {
    "objectID": "reference/recovery.html#caveats",
    "href": "reference/recovery.html#caveats",
    "title": "recovery",
    "section": "",
    "text": "Recovery data for multiple dataflows must not be mixed together. See the docs for each RecoveryConfig subclass for what this means depending on the recovery store. E.g. when using a KafkaRecoveryConfig, each dataflow must have a distinct topic prefix.\nSee comments on input configuration types in bytewax.inputs for any limitations each might have regarding recovery.\nIt is possible that your output systems will see duplicate data around the resume point; design your systems to support at-least-once processing.\nCurrently it is not possible to recover a dataflow with a different number of workers than when it failed.\nThe epoch is the time unit of recovery: dataflows will only resume on epoch boundaries, with the resume epoch being where the dataflow witll resume. Bytewax defaults to a new epoch every 10 seconds. See bytewax.execution.EpochConfig for more info on epochs."
  },
  {
    "objectID": "reference/window.html",
    "href": "reference/window.html",
    "title": "window",
    "section": "",
    "text": "window\n\n\n\nPick a clock and create a config for it. A clock determines the time of each element and the current time used for closing each window. E.g. use the current system time. See the docs for each subclass of ClockConfig for options.\nPick a windower and create a config for it. A windower defines how to take the values and their times and bucket them into windows. E.g. have tumbling windows every 30 seconds. See the docs for each subclass of WindowConfig for options.\nPick a key to route the values for the window and make sure the input to the windowing operator you choose is a 2-tuple of (key: str, value). Windows are managed independently for each key. If you need all data to be processed into the same window state, you can use a constant key like (\"ALL\", value) but this will reduce the parallelism possible in the dataflow. This is similar to all the other stateful operators, so you can read more on their methods on bytewax.Dataflow.\nPass both these configs to the windowing operator of your choice. The windowing operators decide what kind of logic you should apply to values within a window and what should be the output of the window. E.g. bytewax.Dataflow.reduce_window combines all values in a window into a single output and sends that downstream.\n\nYou are allowed and encouraged to have as many different clocks and windowers as you need in a single dataflow. Just instantiate more of them and pass the ones you need for each situation to each windowing operator.\n\n\n\nBecause Bytewax can be run as a distributed system with multiple worker processes and threads all reading relevant data simultaneously, you have to specifically collect and manually sort data that you need to process in strict time order.\n\n\n\nBytewax’s windowing system is built on top of its recovery system (see bytewax.recovery for more info), so failure in the middle of a window will be handled as gracefully as possible.\nSome clocks don’t have a single correct answer on what to do during recovery. E.g. if you use SystemClockConfig with 10 minute windows, but then recover on a 15 minute mark, the system will immediately close out the half-completed window stored during recovery. See the docs for each ClockConfig subclass for specific notes on recovery.\nRecovery happens on the granularity of the epochs of the dataflow, not the windows. See bytewax.inputs for more information on ways to adjust epochs."
  },
  {
    "objectID": "reference/window.html#use",
    "href": "reference/window.html#use",
    "title": "window",
    "section": "",
    "text": "Pick a clock and create a config for it. A clock determines the time of each element and the current time used for closing each window. E.g. use the current system time. See the docs for each subclass of ClockConfig for options.\nPick a windower and create a config for it. A windower defines how to take the values and their times and bucket them into windows. E.g. have tumbling windows every 30 seconds. See the docs for each subclass of WindowConfig for options.\nPick a key to route the values for the window and make sure the input to the windowing operator you choose is a 2-tuple of (key: str, value). Windows are managed independently for each key. If you need all data to be processed into the same window state, you can use a constant key like (\"ALL\", value) but this will reduce the parallelism possible in the dataflow. This is similar to all the other stateful operators, so you can read more on their methods on bytewax.Dataflow.\nPass both these configs to the windowing operator of your choice. The windowing operators decide what kind of logic you should apply to values within a window and what should be the output of the window. E.g. bytewax.Dataflow.reduce_window combines all values in a window into a single output and sends that downstream.\n\nYou are allowed and encouraged to have as many different clocks and windowers as you need in a single dataflow. Just instantiate more of them and pass the ones you need for each situation to each windowing operator."
  },
  {
    "objectID": "reference/window.html#order",
    "href": "reference/window.html#order",
    "title": "window",
    "section": "",
    "text": "Because Bytewax can be run as a distributed system with multiple worker processes and threads all reading relevant data simultaneously, you have to specifically collect and manually sort data that you need to process in strict time order."
  },
  {
    "objectID": "reference/window.html#recovery",
    "href": "reference/window.html#recovery",
    "title": "window",
    "section": "",
    "text": "Bytewax’s windowing system is built on top of its recovery system (see bytewax.recovery for more info), so failure in the middle of a window will be handled as gracefully as possible.\nSome clocks don’t have a single correct answer on what to do during recovery. E.g. if you use SystemClockConfig with 10 minute windows, but then recover on a 15 minute mark, the system will immediately close out the half-completed window stored during recovery. See the docs for each ClockConfig subclass for specific notes on recovery.\nRecovery happens on the granularity of the epochs of the dataflow, not the windows. See bytewax.inputs for more information on ways to adjust epochs."
  },
  {
    "objectID": "reference/tracing.html",
    "href": "reference/tracing.html",
    "title": "tracing",
    "section": "",
    "text": "tracing\ntracing\nTracing and logging in bytewax are handled in the rust side, to offer a really detailed view of what is happening in your dataflow.\nBy default, bytewax sends all “error” logs to the standard output. This can be configured with the log_level parameter of the setup_tracing function.\nAll the logs emitted by bytewax are structured, and can be used to setup proper tracing for the dataflow. To do that you need to talk to a service that collects and shows data coming from bytewax.\nThere two possibilities out of the box: - Jaeger - Opentelemetry collector\n\nOpenetelemetry Collector\nThe Opentelemetry collector is the recommended choice, since it can talk to a lot of different backends, jaeger included, and you can swap your tracing infrastructure without touching the dataflow configuration, since the dataflow only talks to the collector.\n\n\nJaeger\nBytewax can send traces directly to jaeger, without going through the opentelemetry collector. This makes the setup easier, but it’s less flexible."
  },
  {
    "objectID": "reference/client.html",
    "href": "reference/client.html",
    "title": "client",
    "section": "",
    "text": "client\n\n\n\n\n\nName\nDescription\n\n\n\n\nCLIENT_CREATE_ATTEMPT_TIMEOUT\n\n\n\nCLIENT_CREATE_TOTAL_TIMEOUT\n\n\n\nClient\n\n\n\nHEARTBEAT_INTERVAL\n\n\n\nHEARTBEAT_TIMEOUT"
  },
  {
    "objectID": "reference/client.html#attributes",
    "href": "reference/client.html#attributes",
    "title": "client",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nCLIENT_CREATE_ATTEMPT_TIMEOUT\n\n\n\nCLIENT_CREATE_TOTAL_TIMEOUT\n\n\n\nClient\n\n\n\nHEARTBEAT_INTERVAL\n\n\n\nHEARTBEAT_TIMEOUT"
  },
  {
    "objectID": "reference/config.html",
    "href": "reference/config.html",
    "title": "config",
    "section": "",
    "text": "config\n\n\nThe .modal.toml file is generally stored in your home directory. It should look like this::\n[default]\ntoken_id = \"ak-12345...\"\ntoken_secret = \"as-12345...\"\nYou can create this file manually, or you can run the modal token set ... command (see below).\n\n\n\nYou can set a token by running the command::\nmodal token set   --token-id &lt;token id&gt;   --token-secret &lt;token secret&gt;\nThis will write the token id and secret to .modal.toml.\nIf the token id or secret is provided as the string - (a single dash), then it will be read in a secret way from stdin instead.\n\n\n\nOther possible configuration options are:\n\nloglevel (in the .toml file) / MODAL_LOGLEVEL (as an env var). Defaults to WARNING. Set this to DEBUG to see a bunch of internal output.\nlogs_timeout (in the .toml file) / MODAL_LOGS_TIMEOUT (as an env var). Defaults to 10. Number of seconds to wait for logs to drain when closing the session, before giving up.\nautomount (in the .toml file) / MODAL_AUTOMOUNT (as an env var). Defaults to True. By default, Modal automatically mounts modules imported in the current scope, that are deemed to be “local”. This can be turned off by setting this to False.\nserver_url (in the .toml file) / MODAL_SERVER_URL (as an env var). Defaults to https://api.modal.com. Not typically meant to be used.\n\n\n\n\nSome “meta-options” are set using environment variables only:\n\nMODAL_CONFIG_PATH lets you override the location of the .toml file, by default ~/.modal.toml.\nMODAL_PROFILE lets you use multiple sections in the .toml file and switch between them. It defaults to “default”.\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nch\n\n\n\nconfig\n\n\n\nlog_level_numeric\n\n\n\nlogger\n\n\n\nuser_config_path\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nconfig_profiles\nList the available modal profiles in the .modal.toml file.\n\n\nconfig_set_active_profile\nSet the user’s active modal profile by writing it to the .modal.toml file.\n\n\n\n\n\nconfig.config_profiles()\nList the available modal profiles in the .modal.toml file.\n\n\n\nconfig.config_set_active_profile(env)\nSet the user’s active modal profile by writing it to the .modal.toml file."
  },
  {
    "objectID": "reference/config.html#modal.toml",
    "href": "reference/config.html#modal.toml",
    "title": "config",
    "section": "",
    "text": "The .modal.toml file is generally stored in your home directory. It should look like this::\n[default]\ntoken_id = \"ak-12345...\"\ntoken_secret = \"as-12345...\"\nYou can create this file manually, or you can run the modal token set ... command (see below)."
  },
  {
    "objectID": "reference/config.html#setting-tokens-using-the-cli",
    "href": "reference/config.html#setting-tokens-using-the-cli",
    "title": "config",
    "section": "",
    "text": "You can set a token by running the command::\nmodal token set   --token-id &lt;token id&gt;   --token-secret &lt;token secret&gt;\nThis will write the token id and secret to .modal.toml.\nIf the token id or secret is provided as the string - (a single dash), then it will be read in a secret way from stdin instead."
  },
  {
    "objectID": "reference/config.html#other-configuration-options",
    "href": "reference/config.html#other-configuration-options",
    "title": "config",
    "section": "",
    "text": "Other possible configuration options are:\n\nloglevel (in the .toml file) / MODAL_LOGLEVEL (as an env var). Defaults to WARNING. Set this to DEBUG to see a bunch of internal output.\nlogs_timeout (in the .toml file) / MODAL_LOGS_TIMEOUT (as an env var). Defaults to 10. Number of seconds to wait for logs to drain when closing the session, before giving up.\nautomount (in the .toml file) / MODAL_AUTOMOUNT (as an env var). Defaults to True. By default, Modal automatically mounts modules imported in the current scope, that are deemed to be “local”. This can be turned off by setting this to False.\nserver_url (in the .toml file) / MODAL_SERVER_URL (as an env var). Defaults to https://api.modal.com. Not typically meant to be used."
  },
  {
    "objectID": "reference/config.html#meta-configuration",
    "href": "reference/config.html#meta-configuration",
    "title": "config",
    "section": "",
    "text": "Some “meta-options” are set using environment variables only:\n\nMODAL_CONFIG_PATH lets you override the location of the .toml file, by default ~/.modal.toml.\nMODAL_PROFILE lets you use multiple sections in the .toml file and switch between them. It defaults to “default”."
  },
  {
    "objectID": "reference/config.html#attributes",
    "href": "reference/config.html#attributes",
    "title": "config",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nch\n\n\n\nconfig\n\n\n\nlog_level_numeric\n\n\n\nlogger\n\n\n\nuser_config_path"
  },
  {
    "objectID": "reference/config.html#functions",
    "href": "reference/config.html#functions",
    "title": "config",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nconfig_profiles\nList the available modal profiles in the .modal.toml file.\n\n\nconfig_set_active_profile\nSet the user’s active modal profile by writing it to the .modal.toml file.\n\n\n\n\n\nconfig.config_profiles()\nList the available modal profiles in the .modal.toml file.\n\n\n\nconfig.config_set_active_profile(env)\nSet the user’s active modal profile by writing it to the .modal.toml file."
  },
  {
    "objectID": "reference/gpu.html",
    "href": "reference/gpu.html",
    "title": "gpu",
    "section": "",
    "text": "gpu\n\n\n\n\n\nName\nDescription\n\n\n\n\nGPU_T\n\n\n\nSTRING_TO_GPU_CONFIG\n\n\n\ndisplay_string_to_config\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ndisplay_gpu_config\nmdmd:hidden\n\n\nparse_gpu_config\nmdmd:hidden\n\n\n\n\n\ngpu.display_gpu_config(value)\nmdmd:hidden\n\n\n\ngpu.parse_gpu_config(value, raise_on_true=True)\nmdmd:hidden"
  },
  {
    "objectID": "reference/gpu.html#attributes",
    "href": "reference/gpu.html#attributes",
    "title": "gpu",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nGPU_T\n\n\n\nSTRING_TO_GPU_CONFIG\n\n\n\ndisplay_string_to_config"
  },
  {
    "objectID": "reference/gpu.html#functions",
    "href": "reference/gpu.html#functions",
    "title": "gpu",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ndisplay_gpu_config\nmdmd:hidden\n\n\nparse_gpu_config\nmdmd:hidden\n\n\n\n\n\ngpu.display_gpu_config(value)\nmdmd:hidden\n\n\n\ngpu.parse_gpu_config(value, raise_on_true=True)\nmdmd:hidden"
  },
  {
    "objectID": "reference/mount.html",
    "href": "reference/mount.html",
    "title": "mount",
    "section": "",
    "text": "mount\n\n\n\n\n\nName\nDescription\n\n\n\n\nMOUNT_PUT_FILE_CLIENT_TIMEOUT\n\n\n\nMount\n\n\n\nMountHandle\n\n\n\ncreate_client_mount\n\n\n\ncreate_package_mounts\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nclient_mount_name\n\n\n\n\n\n\nmount.client_mount_name()"
  },
  {
    "objectID": "reference/mount.html#attributes",
    "href": "reference/mount.html#attributes",
    "title": "mount",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nMOUNT_PUT_FILE_CLIENT_TIMEOUT\n\n\n\nMount\n\n\n\nMountHandle\n\n\n\ncreate_client_mount\n\n\n\ncreate_package_mounts"
  },
  {
    "objectID": "reference/mount.html#functions",
    "href": "reference/mount.html#functions",
    "title": "mount",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nclient_mount_name\n\n\n\n\n\n\nmount.client_mount_name()"
  },
  {
    "objectID": "reference/image.html",
    "href": "reference/image.html",
    "title": "image",
    "section": "",
    "text": "image\n\n\n\n\n\nName\nDescription\n\n\n\n\nImage\n\n\n\nImageHandle"
  },
  {
    "objectID": "reference/image.html#attributes",
    "href": "reference/image.html#attributes",
    "title": "image",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nImage\n\n\n\nImageHandle"
  },
  {
    "objectID": "reference/app.html",
    "href": "reference/app.html",
    "title": "app",
    "section": "",
    "text": "app\n\n\n\n\n\nName\nDescription\n\n\n\n\nApp\n\n\n\ncontainer_app\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nis_local\nReturns if we are currently on the machine launching/deploying a Modal app\n\n\n\n\n\napp.is_local()\nReturns if we are currently on the machine launching/deploying a Modal app\nReturns True when executed locally on the user’s machine. Returns False when executed from a Modal container in the cloud."
  },
  {
    "objectID": "reference/app.html#attributes",
    "href": "reference/app.html#attributes",
    "title": "app",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nApp\n\n\n\ncontainer_app"
  },
  {
    "objectID": "reference/app.html#functions",
    "href": "reference/app.html#functions",
    "title": "app",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nis_local\nReturns if we are currently on the machine launching/deploying a Modal app\n\n\n\n\n\napp.is_local()\nReturns if we are currently on the machine launching/deploying a Modal app\nReturns True when executed locally on the user’s machine. Returns False when executed from a Modal container in the cloud."
  },
  {
    "objectID": "reference/functions.html",
    "href": "reference/functions.html",
    "title": "functions",
    "section": "",
    "text": "functions\n\n\n\n\n\nName\nDescription\n\n\n\n\nATTEMPT_TIMEOUT_GRACE_PERIOD\n\n\n\nFunction\n\n\n\nFunctionCall\n\n\n\nFunctionHandle\n\n\n\nMAP_INVOCATION_CHUNK_SIZE\n\n\n\nPartialFunction\n\n\n\nasgi_app\n\n\n\ngather\n\n\n\nmethod\n\n\n\nweb_endpoint\n\n\n\nwsgi_app\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncurrent_input_id\nReturns the input ID for the currently processed input.\n\n\nexc_with_hints\nmdmd:hidden\n\n\n\n\n\nfunctions.current_input_id()\nReturns the input ID for the currently processed input.\nCan only be called from Modal function (i.e. in a container context).\nfrom modal import current_input_id\n\n@stub.function()\ndef process_stuff():\n    print(f\"Starting to process {current_input_id()}\")\n\n\n\nfunctions.exc_with_hints(exc)\nmdmd:hidden"
  },
  {
    "objectID": "reference/functions.html#attributes",
    "href": "reference/functions.html#attributes",
    "title": "functions",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nATTEMPT_TIMEOUT_GRACE_PERIOD\n\n\n\nFunction\n\n\n\nFunctionCall\n\n\n\nFunctionHandle\n\n\n\nMAP_INVOCATION_CHUNK_SIZE\n\n\n\nPartialFunction\n\n\n\nasgi_app\n\n\n\ngather\n\n\n\nmethod\n\n\n\nweb_endpoint\n\n\n\nwsgi_app"
  },
  {
    "objectID": "reference/functions.html#functions",
    "href": "reference/functions.html#functions",
    "title": "functions",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ncurrent_input_id\nReturns the input ID for the currently processed input.\n\n\nexc_with_hints\nmdmd:hidden\n\n\n\n\n\nfunctions.current_input_id()\nReturns the input ID for the currently processed input.\nCan only be called from Modal function (i.e. in a container context).\nfrom modal import current_input_id\n\n@stub.function()\ndef process_stuff():\n    print(f\"Starting to process {current_input_id()}\")\n\n\n\nfunctions.exc_with_hints(exc)\nmdmd:hidden"
  },
  {
    "objectID": "reference/web_endpoint.html",
    "href": "reference/web_endpoint.html",
    "title": "web_endpoint",
    "section": "",
    "text": "web_endpoint\nweb_endpoint"
  },
  {
    "objectID": "reference/method.html",
    "href": "reference/method.html",
    "title": "method",
    "section": "",
    "text": "method\nmethod"
  },
  {
    "objectID": "reference/functions.web_endpoint.html",
    "href": "reference/functions.web_endpoint.html",
    "title": "functions.web_endpoint",
    "section": "",
    "text": "functions.web_endpoint\nfunctions.web_endpoint"
  },
  {
    "objectID": "reference/functions.method.html",
    "href": "reference/functions.method.html",
    "title": "functions.method",
    "section": "",
    "text": "functions.method\nfunctions.method"
  }
]